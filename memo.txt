Building a Reactive RESTful Web Service
    This guide walks you through the process of creating a "Hello, Spring!" RESTful web service with Spring WebFlux (new as of Spring Boot 2.0) and then consumes that service with a WebClient (also new as of Spring Boot 2.0).

    *This guide shows the functional way of using Spring WebFlux. You can also use annotations with WebFlux.

What You Will Build
    You will build a RESTful web service with Spring Webflux and a WebClient consumer of that service. You will be able to see output in both System.out and at:
        http://localhost:8080/hello

Github:
https://github.com/spring-guides/gs-reactive-rest-service

Initial dependency:
    Spring Reactive Web

1) Create a WebFlux Handler
   We’re going to start with a Greeting POJO that will be serialized as JSON by our RESTful service:

   In the Spring Reactive approach, we use a handler to handle the request and create a response, as shown in the following example:

   src/main/java/hello/GreetingHandler.java
   This simple reactive class always returns a JSON body with a “Hello, Spring!” greeting. It could return many other things, including a stream of items from a database, a stream of items that were generated by calculations, and so on. Note the reactive code: a Mono object that holds a ServerResponse body.

2) Create a Router
   In this application, we use a router to handle the only route we expose (/hello), as shown in the following example:
   src/main/java/hello/GreetingRouter.java

   The router listens for traffic on the /hello path and returns the value provided by our reactive handler class.


